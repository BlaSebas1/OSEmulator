	<h1>SIMULACIÓN DE UN SISTEMA OPERATIVO</h1>
	<br></br>
	<h2>Objetivo</h2>
	<p>Realizar, mediante cualquier lenguaje de programación, la simulacíon de un sistema operativo,
	crear, manejar y destruir los procesos, asignarlos a un espacio de memoria mediante algún método
	de ajuste. Crear estadísticas en base a estos factores.</p>
	<br></br>
	<h2>Desarrollo</h2>
	<p>Se debe de crear un entorno de Sistema Operativo, este funcionará como una simulacíon de un SO real.</p>
	<p>Al momento de ejecutarse el entorno del SO se deberán presentar la opción de cual método de ajuste de
	memoria se usará. Una vez seleccionado el ajuste se procede a crear automáticamente los procesos e irlos
	asignando a la memoria. Despues de su tiempo de ejecución se mandará a cola el proceso o se destruirá según
	sea el caso.</p>
	<p><!--Start of process-->
	<b>Proceso</b><br>
	El objeto del proceso constara de mínimo las siguientes características:
		<ul>
			<li>Tamaño</li>
				<ul>
					<li>Esto indicará el tamaño del proceso a ejecutarse para alojarse en la memoria</li>
				</ul>
			<li>Tiempo Total de Ejecución</li>
				<ul>
					<li>Esto indicará el tiempo que le tardará al proceso realizar su función.
					Este tiempo es afectado solo cuando esta en ejecución (memoria) y no debe de ser 
					alterado cuando este en espera.</li>
				</ul>
			<li>ID único</li>
				<ul>
					<li>Servirá como un identificador del proceso.</li>
				</ul>
		</ul>
	NOTA [1]: Los campos de Tamaño y Tiempo Total de Ejecución deberán de ser asignadas aleatoriamente y tambíen
	deberán de ser parametrizable.
	</p><!--End of process-->
	<p><!--Start of memory allocation-->
	<b>Memoria</b><br>
	La memoria se manejara como una lista FIFO (First-In First-Out).<br>
	//Sera variable, asignar cada objeto de la memoria con un tamaño variable?<br>
	La memoria sirve para ajustar los procesos dentro de ella. Para esto consta de 3 algoritmos de ajuste:
	<div align="left">
		<ul>
			<li>Primer Ajuste</li>
				<ul>
					<li>Colocar el programa al primer espacio disponible en la memoria.</li>
				</ul>
			<li>Mejor Ajuste</li>
				<ul>
					<li>Colocar el programa al espacio de memoria con menor desperdicio de ella.</li>
				</ul>
			<li>Peor Ajuste</li>
				<ul>
					<li>Colocar el programa al mayor espacio de memoria disponible.</li>
				</ul>
		</ul>
	</div>
	NOTA [1]: Al comenzar la emulación del SO se debe presentar la opción al usuario de escoger cual método
	 de ajuste desea.<br>
	NOTA [2]: Independientemente del método de ajuste de memoria seleccionado también se deberá de simular
	 el entorno del SO con los otros dos métodos de ajuste, esto con la finalidad de realizar las estadísticas.
	</p><!-- End of memory -->
	<p><!-- Start of Statistics -->
	<b>Estadísticas</b><br>
	Se deben realizar estadísticas en base a los 3 modelos de ajuste de memoria.<br>
	Comparaciones sobre cual fue el más rápido, más efectivo, etc.
	</p><!-- End of Statistics -->
	<p><!-- Start of Final Notes -->
	<b>Notas Finales</b><br>
	Se deberá de correr la simulación un total de 360,000,000 unidades de tiempo. <br>
	Siempre deberá de haber procesos (en memoria o en cola) durante todo el tiempo de la simulación.<br>
	</p><!-- End of Final Notes -->
	<hr>
	<p>
	<b>En resumen:</b><br>
	</p>
	
	<p><b>Proyecto</b></p>
	<ul>
		<li>Simulación de un SO</li>
		<li>Emular un ambiente de SO</li>
		<li>Procesos(tamaño, tiempo total de ejecución, id único ) generar las dos primeras de forma aleatoria también parametrizable
	</ul>

	<p><b>Algoritmos de colocación</b></p>
        <ul>
		<li>Primer ajuste</li>
		<li>Mejor ajuste</li>
		<li>Peor ajuste</li>
        </ul>

	<p><b>Tomar en cuenta</b></p>
        <ul>
		<li>Tamaño de memoria</li>
		<li>Tiempo de ejecución por proceso(ambos parametrizables)</li>
		<li>Siempre debe de haber procesos</li>
		<li>Tiempo total de ejecución de la simulación</li>
        </ul>
	<p><b>Estadísticas</b></p>